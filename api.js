import axios from 'axios';

const API_URL = 'http://localhost:8000/api';

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä `axios`
const httpClient = axios.create({
	baseURL: API_URL,
	withCredentials: true, // –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É HTTP-only cookies
	headers: {
		'Content-Type': 'application/json',
		'Accept': 'application/json'
	}
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
const handleApiError = (error, message) => {
	if (error.response) {
		// –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π (4xx, 5xx)
		console.error(`${message}:`, error.response.status, error.response.data);
	} else if (error.request) {
		// –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
		console.error(`${message}: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`, error.request);
	} else {
		// –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
		console.error(`${message}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`, error.message);
	}
	throw error;
};

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = async (phone, password, firstName, lastName) => {
	try {
		const response = await httpClient.post('/register', {
			phone,
			password,
			first_name: firstName,
			last_name: lastName
		});
		return response.data;
	} catch (error) {
		handleApiError(error, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
	}
};

// üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = async (phone, password) => {
	try {
		const response = await httpClient.post('/login', { phone, password });
		return response.data;
	} catch (error) {
		handleApiError(error, '–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞');
	}
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export const getProfile = async () => {
	try {
		const response = await httpClient.get('/profile');
		console.log("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:", response.data);
		return response.data;
	} catch (error) {
		handleApiError(error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
	}
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getRole = async () => {
	try {
		const response = await httpClient.get('/role');
		return response.data;
	} catch (error) {
		handleApiError(error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏');
	}
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π
export const getGuests = async () => {
	try {
		const response = await httpClient.get('/users/guests');
		return response.data;
	} catch (error) {
		handleApiError(error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π');
	}
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const upgradeUser = async (userId) => {
	try {
		const response = await httpClient.patch(`/users/${userId}/upgrade`);
		return response.data;
	} catch (error) {
		handleApiError(error, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏');
	}
};